name: Deploy to Development Server

# docker-server 브랜치 이벤트에 대한 워크플로우 트리거 설정
on:
  push:
    branches: [docker-server] # docker-server 브랜치에 push가 발생하면 실행
  pull_request:
    branches: [docker-server] # docker-server 브랜치로 PR이 생성되면 실행

jobs:
  deploy:
    runs-on: ubuntu-latest # Ubuntu 최신 버전에서 실행
    environment: development # development 환경의 secrets 사용
    steps:
      # 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 필수 환경 변수 존재 여부 확인
      - name: Check required secrets
        run: |
          if [[ -z "${{ secrets.HOST }}" ]]; then
            echo "Missing HOST secret"
            exit 1
          fi
          if [[ -z "${{ secrets.PORT }}" ]]; then
            echo "Missing PORT secret"
            exit 1
          fi
          if [[ -z "${{ secrets.USERNAME }}" ]]; then
            echo "Missing USERNAME secret"
            exit 1
          fi
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            echo "Missing SSH_PRIVATE_KEY secret"
            exit 1
          fi

      # 환경 변수 파일 생성
      - name: Create .env file
        run: |
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> .env
          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> .env
          echo "NGINX_PORT=${{ secrets.NGINX_PORT }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

      - name: Prepare target directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf ${{ secrets.DEPLOY_PATH }}/*
            mkdir -p ${{ secrets.DEPLOY_PATH }}

      # 파일을 서버로 복사
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "${{ secrets.DEPLOY_PATH }}"
          debug: true # 디버그 로그 활성화

      # 서버에서 Docker 배포 실행
      - name: Execute deploy script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # PATH에 homebrew bin 추가
            export PATH="/opt/homebrew/bin:$PATH"

            # 애플리케이션 디렉토리로 이동
            cd ${{ secrets.DEPLOY_PATH }}

            # 실행 중인 컨테이너 종료
            docker-compose down

            # 중지된 컨테이너, 사용하지 않는 이미지, 네트워크, 볼륨 정리
            echo "Cleaning up Docker resources..."
            docker system prune -af --volumes

            # 컨테이너 새로 빌드 및 시작
            echo "Starting containers..."
            docker-compose up -d --build

            # 배포 결과 확인
            echo "Checking deployment status..."
            docker-compose ps

            # 애플리케이션 로그 확인
            echo "Checking application logs..."
            docker-compose logs --tail=100
